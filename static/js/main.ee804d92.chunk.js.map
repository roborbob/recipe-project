{"version":3,"sources":["assets/fonts/Tangerine/Tangerine-Bold.ttf","assets/fonts/Tangerine/Tangerine-Regular.ttf","components/header.js","components/spinner.js","containers/recipePage.js","components/recipe.js","containers/recipes.js","components/fonts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","styled","div","Header","SpinnerStyles","Spinner","className","RecipePageStyle","article","RecipePage","props","sessionInstructions","JSON","parse","sessionStorage","getItem","match","params","id","useState","undefined","instructions","setInstructions","useEffect","console","log","a","url","axios","get","apiKey","request","setItem","stringify","data","fetchRecipeData","src","image","title","summary","analyzedInstructions","steps","map","e","i","key","step","RecipeContainer","Recipe","onClick","to","RecipesContainer","Recipes","persistedData","state","setState","loading","toggleLoading","fetchRecipes","method","response","week","Object","entries","meals","readyIn","readyInMinutes","createGlobalStyle","TangerineBold","TangerineRegular","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,+C,gqBCG3C,IAAMC,EAAQC,IAAOC,IAAV,KA+BIC,EATA,WACX,OACI,kBAACH,EAAD,KACI,mD,+zCCzBZ,IAAMI,EAAgBH,IAAOC,IAAV,KAsEJG,EARC,WACZ,OACI,kBAACD,EAAD,KACK,yBAAKE,UAAU,gBAAe,8BAAW,8BAAW,8BAAW,iC,uQC/D5E,IAAMC,EAAkBN,IAAOO,QAAV,KAiDNC,EArCI,SAACC,GAChB,IAAMC,EAAsBC,KAAKC,MAAMC,eAAeC,QAAQL,EAAMM,MAAMC,OAAOC,KADvD,EAEcC,mBAASR,QAA4CS,GAFnE,mBAEnBC,EAFmB,KAELC,EAFK,KAmB1B,OAfAC,qBAAU,WACN,GAAIT,eAAeC,QAAQL,EAAMM,MAAMC,OAAOC,IAU1CM,QAAQC,IAAI,4BAVkC,EAEzB,uCAAG,8BAAAC,EAAA,6DAChBC,EADgB,8CAC6BjB,EAAMM,MAAMC,OAAOC,GADhD,yBAEEU,IAAMC,IAAIF,EAAI,CAACV,OAAO,CAACa,OAHxC,sCACe,OAEdC,EAFc,OAGpBjB,eAAekB,QAAf,UAA0BtB,EAAMM,MAAMC,OAAOC,IAAMN,KAAKqB,UAAUF,EAAQG,OAC1EZ,EAAgBS,EAAQG,MAJJ,2CAAH,qDAMrBC,MAIN,CAACzB,EAAMM,MAAMC,OAAOC,KACtBM,QAAQC,IAAIJ,GAER,kBAACd,EAAD,KACKc,EACD,oCACI,yBAAKe,IAAKf,EAAagB,QACvB,4BAAI,8BAAOhB,EAAaiB,QACxB,2BAAIjB,EAAakB,UAEf,kBAAC,EAAD,MACN,4BACClB,EAAeA,EAAamB,qBAAqB,GAAGC,MAAMC,KAAK,SAACC,EAAEC,GAAH,OAC3D,wBAAIC,IAAKD,GAAG,uBAAGC,IAAKD,GAAID,EAAEG,UAC1B,kBAAC,EAAD,S,gcC5CjB,IAAMC,EAAkB9C,IAAOC,IAAV,KAkCN8C,EAbA,SAACtC,GAIZ,OACI,kBAACqC,EAAD,CAAiBE,QAAS,WAAsBvC,EAAMQ,KAClD,kBAAC,IAAD,CAAMgC,GAAE,UAAKxC,EAAMQ,KACf,4BAAKR,EAAM4B,U,yUC1B3B,IAAMa,EAAmBlD,IAAOC,IAAV,KAqDPkD,EAtCC,WACZ,IAAMC,EAAgBzC,KAAKC,MAAMC,eAAeC,QAAQ,YADtC,EAEOI,mBAASkC,GAAgC,IAFhD,mBAEXC,EAFW,KAELC,EAFK,OAGepC,oBAAS,GAHxB,mBAGXqC,EAHW,KAGFC,EAHE,KAwBlB,OAnBAlC,qBAAU,WACN,GAAGT,eAAeC,QAAf,WACC0C,GAAc,OACX,CACH,IACMC,EAAY,uCAAG,4BAAAhC,EAAA,sEACME,IAAM,CACzB+B,OAAO,MACPhC,IAAI,kEACJV,OAAQ,CAACa,OALR,sCACY,OACX8B,EADW,OAMjB9C,eAAekB,QAAf,UAAkCpB,KAAKqB,UAAU2B,EAAS1B,KAAK2B,OAC/DN,EAASK,EAAS1B,KAAK2B,MAPN,2CAAH,qDASlBJ,GAAc,GACdC,OAEL,CAACJ,IAGA,kBAACH,EAAD,KACKK,EAAU,kBAAC,EAAD,MAAaM,OAAOC,QAAQT,GAAOZ,KAAI,SAACC,EAAEC,GAAH,OAC9C,kBAAC,EAAD,CACIC,IAAKD,EACLN,MAAOK,EAAE,GAAGqB,MAAM,GAAG1B,MACrBpB,GAAIyB,EAAE,GAAGqB,MAAM,GAAG9C,GAClB+C,QAAStB,EAAE,GAAGqB,MAAM,GAAGE,sB,wVChD5BC,kBAAf,IAIcC,IACAC,K,MCUCC,MAXf,WACE,OACE,yBAAKhE,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOiE,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,OAAOC,UAAWhE,MCFhBiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS7D,MACvB,2DCXN8D,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,SAAUC,mBACvB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.ee804d92.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Tangerine-Bold.9afc148d.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Tangerine-Regular.c848a4eb.ttf\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.div`\n    position: fixed;\n    display: block;\n    background: black;\n    text-align: center;\n    width: calc(100% - 20px);\n    top: 10px;\n    left: 10px;\n    z-index: 1000;\n    border-radius: 8px;\n    h1 {\n        font-family: 'Tangerine';\n        font-weight: 400;\n        letter-spacing: 1.2px;\n        color: white;\n        font-size: 40px;\n        margin: 0;\n        padding: 20px 0px 5px 0px;\n    }\n`\n\n\nconst Header = () => {\n    return (\n        <Title>\n            <h1>Whats For Dinner?</h1>\n        </Title>\n    )\n}\n\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\n\nconst SpinnerStyles = styled.div`\ndisplay: block;\nmargin: auto;\nwidth: 80px !important;\nmargin-top: 15px;\n.lds-ellipsis {\n    display: inline-block;\n    position: relative;\n    width: 80px !important;\n    height: 80px;\n  }\n  .lds-ellipsis div {\n    position: absolute;\n    top: 33px;\n    width: 13px !important;\n    height: 13px;\n    border-radius: 50%;\n    background: salmon;\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\n  }\n  .lds-ellipsis div:nth-child(1) {\n    left: 8px;\n    animation: lds-ellipsis1 0.6s infinite;\n  }\n  .lds-ellipsis div:nth-child(2) {\n    left: 8px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  .lds-ellipsis div:nth-child(3) {\n    left: 32px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  .lds-ellipsis div:nth-child(4) {\n    left: 56px;\n    animation: lds-ellipsis3 0.6s infinite;\n  }\n  @keyframes lds-ellipsis1 {\n    0% {\n      transform: scale(0);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  @keyframes lds-ellipsis3 {\n    0% {\n      transform: scale(1);\n    }\n    100% {\n      transform: scale(0);\n    }\n  }\n  @keyframes lds-ellipsis2 {\n    0% {\n      transform: translate(0, 0);\n    }\n    100% {\n      transform: translate(24px, 0);\n    }\n  }\n`\n\nconst Spinner = () => {\n    return (\n        <SpinnerStyles>\n             <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div> \n        </SpinnerStyles>   \n    )\n}\n\nexport default Spinner;","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport Spinner from '../components/spinner';\nimport axios from 'axios';\n\nconst RecipePageStyle = styled.article`\n    margin-top: 90px;\n    text-align: left;\n    width: 100%;\n    img{\n        width: 100%;\n        border-radius: 10px;\n    }\n    p {\n        font-size: 14px;\n    }\n`\nconst RecipePage = (props) => {\n    const sessionInstructions = JSON.parse(sessionStorage.getItem(props.match.params.id));\n    const [instructions, setInstructions] = useState(sessionInstructions ? sessionInstructions : undefined)\n\n    useEffect(()=> {\n        if(!sessionStorage.getItem(props.match.params.id)){\n            const key = `276ff92f42f14a1690bac6bdc10438bb`\n            const fetchRecipeData = async() => {\n                let url = `https://api.spoonacular.com/recipes/${props.match.params.id}/information`\n                const request = await axios.get(url,{params:{apiKey: key}});\n                sessionStorage.setItem(`${props.match.params.id}`, JSON.stringify(request.data))\n                setInstructions(request.data)\n            }\n            fetchRecipeData()\n        }else {\n            console.log('Using sessionStorage')\n        }\n    },[props.match.params.id])\n    console.log(instructions)\n    return (\n        <RecipePageStyle>\n            {instructions ? \n            <>\n                <img src={instructions.image} />\n                <h1><mark>{instructions.title}</mark></h1> \n                <p>{instructions.summary}</p>\n            </>\n                : <Spinner/>}\n            <ol>\n            {instructions ? instructions.analyzedInstructions[0].steps.map( (e,i) => (\n                 <li key={i}><p key={i}>{e.step}</p></li>\n            )) : <Spinner/> }\n            </ol>\n        </RecipePageStyle>\n    )\n}\n\nexport default RecipePage;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst RecipeContainer = styled.div`\n    width: 50%;\n    height: 100px;\n    text-align: left;\n    padding: 10px;\n    outline: 1px solid silver;\n    &:hover {\n        cursor: pointer;\n    }\n    a {\n        text-decoration: none;\n    }\n    h2{\n        font-family: Helvetica Neue;\n        font-size: 14px;\n        font-weight: 300;\n        color: black;\n        text-transform: capitalize;\n    }\n\n`\nconst Recipe = (props) => {\n\n    const redirectHandler = (e) => {\n    }\n    return (\n        <RecipeContainer onClick={() => redirectHandler(props.id)}>\n            <Link to={`${props.id}`}>\n                <h2>{props.title}</h2>\n            </Link>\n        </RecipeContainer>\n    )\n}\n\nexport default Recipe;","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport Recipe from '../components/recipe';\nimport axios from 'axios';\nimport Spinner from '../components/spinner';\n\nconst RecipesContainer = styled.div`\n    top: 90px;\n    position: relative;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n    border-radius: 5px;\n    margin-top: 10px;\n    background: yellow;\n    overflow: hidden;\n    div:nth-child(1) {\n        width: 100%;\n    }\n`\n\nconst Recipes = () => {\n    const persistedData = JSON.parse(sessionStorage.getItem('recipes'))\n    const [state,setState] = useState(persistedData ? persistedData : {})\n    const [loading, toggleLoading] = useState(true);\n\n    useEffect(() => {\n        if(sessionStorage.getItem(`recipes`)){\n            toggleLoading(false)\n        } else {\n            const key = `276ff92f42f14a1690bac6bdc10438bb`\n            const fetchRecipes = async() => {\n                const response = await axios({\n                    method: `get`,\n                    url: `https://api.spoonacular.com/mealplanner/generate?timeFrame=week`,\n                    params: {apiKey: key}\n                })\n                sessionStorage.setItem(`recipes`, JSON.stringify(response.data.week))\n                setState(response.data.week)\n            }\n            toggleLoading(true)\n            fetchRecipes();\n        }\n    }, [state])\n\n    return (\n        <RecipesContainer>\n            {loading ? <Spinner/> : Object.entries(state).map((e,i) =>  \n                <Recipe \n                    key={i} \n                    title={e[1].meals[1].title} \n                    id={e[1].meals[1].id}\n                    readyIn={e[1].meals[1].readyInMinutes}\n                ></Recipe>)}\n        </RecipesContainer>\n    )\n\n}\n\nexport default Recipes;","import { createGlobalStyle } from 'styled-components';\nimport TangerineBold from '../assets/fonts/Tangerine/Tangerine-Bold.ttf';\nimport TangerineRegular from '../assets/fonts/Tangerine/Tangerine-Regular.ttf';\n\nexport default createGlobalStyle`\n    @font-face {\n        font-family: 'Tangerine';\n        src: local('Tangerine'), local('Tangerine'),\n        url(${TangerineBold}) format('woff2'),\n        url(${TangerineRegular}) format('woff');\n        font-weight: 300;\n        font-style: normal;\n    }\n`;","import React from 'react';\nimport Header from './components/header';\nimport {Route} from 'react-router-dom';\nimport RecipePage from './containers/recipePage';\nimport Recipes from './containers/recipes';\nimport GlobalFonts from './components/fonts';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalFonts/>\n      <Header/>\n      <Route exact path=\"/\" component={Recipes}/>\n      <Route path=\"/:id\" component={RecipePage}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}