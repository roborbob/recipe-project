{"version":3,"sources":["components/header.js","components/recipe.js","components/spinner.js","containers/recipes.js","App.js","serviceWorker.js","index.js"],"names":["Title","styled","div","Header","RecipeContainer","Recipe","props","title","SpinnerStyles","Spinner","className","RecipesContainer","PrimaryRecipe","Recipes","useState","localStorage","getItem","state","loading","toggleLoading","useEffect","console","log","a","axios","method","url","params","apiKey","response","setItem","JSON","stringify","data","week","fetchRecipes","Object","entries","parse","slice","map","e","i","key","meals","id","readyIn","readyInMinutes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gqBAGA,IAAMA,EAAQC,IAAOC,IAAV,KA2BIC,EATA,WACX,OACI,kBAACH,EAAD,KACI,mD,uRCrBZ,IAAMI,EAAkBH,IAAOC,IAAV,KAoBNG,EARA,SAACC,GACZ,OACI,kBAACF,EAAD,KACI,4BAAKE,EAAMC,S,osCCfvB,IAAMC,EAAgBP,IAAOC,IAAV,KAkEJO,EARC,WACZ,OACI,kBAACD,EAAD,KACK,yBAAKE,UAAU,gBAAe,8BAAW,8BAAW,8BAAW,iC,4eC1D5E,IAAMC,EAAmBV,IAAOC,IAAV,KAWhBU,EAAgBX,IAAOC,IAAV,KAkDJW,EAtCC,WAAO,IAAD,EACOC,mBAASC,aAAaC,QAAQ,YADrC,mBACXC,EADW,aAEeH,oBAAS,IAFxB,mBAEXI,EAFW,KAEFC,EAFE,KAuBlB,OAnBAC,qBAAU,WACN,GAAGL,aAAaC,QAAb,WACCG,GAAc,GACdE,QAAQC,IAAR,0BACG,CACHH,GAAc,IAEI,uCAAG,4BAAAI,EAAA,sEACMC,IAAM,CACzBC,OAAO,MACPC,IAAI,kEACJC,OAAQ,CAACC,OALR,sCACY,OACXC,EADW,OAMjBd,aAAae,QAAb,UAAgCC,KAAKC,UAAUH,EAASI,KAAKC,OAN5C,2CAAH,qDAQlBC,MAEL,CAAClB,IAGA,kBAACN,EAAD,KACI,kBAACC,EAAD,KAAe,+CACdM,EAAU,kBAAC,EAAD,MAAakB,OAAOC,QAAQN,KAAKO,MAAMrB,IAAQsB,MAAM,GAAGC,KAAI,SAACC,EAAEC,GAAH,OACnE,kBAAC,EAAD,CACIC,IAAKD,EACLnC,MAAOkC,EAAE,GAAGG,MAAM,GAAGrC,MACrBsC,GAAIJ,EAAE,GAAGG,MAAM,GAAGC,GAClBC,QAASL,EAAE,GAAGG,MAAM,GAAGG,sB,MC9C5BC,MATf,WACE,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.20789f30.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst Title = styled.div`\n    position: fixed;\n    display: block;\n    background: black;\n    text-align: center;\n    width: 355px;\n    border-radius: 8px;\n    h1 {\n        font-family: 'Times New Roman';\n        font-weight: 100;\n        letter-spacing: 1.2px;\n        color: white;\n        font-size: 30px;\n        padding: 10px 0px 5px 0px;\n    }\n`\n\n\nconst Header = () => {\n    return (\n        <Title>\n            <h1>Whats For Dinner?</h1>\n        </Title>\n    )\n}\n\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\n\nconst RecipeContainer = styled.div`\n    flex: 100px;\n    height: 100px;\n    background: salmon;\n    text-align: left;\n    padding: 10px;\n    h2{\n        font-size: 10px;\n        font-weight: 300;\n    }\n\n`\nconst Recipe = (props) => {\n    return (\n        <RecipeContainer>\n            <h2>{props.title}</h2>\n        </RecipeContainer>\n    )\n}\n\nexport default Recipe;","import React from 'react';\nimport styled from 'styled-components';\n\nconst SpinnerStyles = styled.div`\n.lds-ellipsis {\n    display: inline-block;\n    position: relative;\n    width: 80px;\n    height: 80px;\n  }\n  .lds-ellipsis div {\n    position: absolute;\n    top: 33px;\n    width: 13px;\n    height: 13px;\n    border-radius: 50%;\n    background: #fff;\n    animation-timing-function: cubic-bezier(0, 1, 1, 0);\n  }\n  .lds-ellipsis div:nth-child(1) {\n    left: 8px;\n    animation: lds-ellipsis1 0.6s infinite;\n  }\n  .lds-ellipsis div:nth-child(2) {\n    left: 8px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  .lds-ellipsis div:nth-child(3) {\n    left: 32px;\n    animation: lds-ellipsis2 0.6s infinite;\n  }\n  .lds-ellipsis div:nth-child(4) {\n    left: 56px;\n    animation: lds-ellipsis3 0.6s infinite;\n  }\n  @keyframes lds-ellipsis1 {\n    0% {\n      transform: scale(0);\n    }\n    100% {\n      transform: scale(1);\n    }\n  }\n  @keyframes lds-ellipsis3 {\n    0% {\n      transform: scale(1);\n    }\n    100% {\n      transform: scale(0);\n    }\n  }\n  @keyframes lds-ellipsis2 {\n    0% {\n      transform: translate(0, 0);\n    }\n    100% {\n      transform: translate(24px, 0);\n    }\n  }\n`\n\nconst Spinner = () => {\n    return (\n        <SpinnerStyles>\n             <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div> \n        </SpinnerStyles>   \n    )\n}\n\nexport default Spinner;","import React, {useEffect, useState} from 'react';\nimport styled from 'styled-components';\nimport Recipe from '../components/recipe';\nimport axios from 'axios';\nimport Spinner from '../components/spinner';\n\nconst RecipesContainer = styled.div`\n    top: 90px;\n    position: relative;\n    display: flex;\n    flex-wrap: wrap;\n    flex-direction: row;\n    border-radius: 5px;\n    margin-top: 10px;\n    overflow: hidden;\n`\n\nconst PrimaryRecipe = styled.div`\n    width: 100%;\n    height: 150px;\n    background: salmon;\n    text-align: left;\n    padding: 5px;\n    font-size: 20px;\n    h2{\n        font-weight: 300;\n    }\n`\n\nconst Recipes = () => {\n    const [state,setState] = useState(localStorage.getItem('recipes'))\n    const [loading, toggleLoading] = useState(true);\n\n    useEffect(() => {\n        if(localStorage.getItem(`recipes`)){\n            toggleLoading(false)\n            console.log(`Using localStorage`)\n        } else {\n            toggleLoading(true)\n            const key = `276ff92f42f14a1690bac6bdc10438bb`\n            const fetchRecipes = async() => {\n                const response = await axios({\n                    method: `get`,\n                    url: `https://api.spoonacular.com/mealplanner/generate?timeFrame=week`,\n                    params: {apiKey: key}\n                })\n                localStorage.setItem(`recipes`, JSON.stringify(response.data.week))\n            }\n            fetchRecipes();\n        }\n    }, [state])\n\n    return (\n        <RecipesContainer>\n            <PrimaryRecipe><h2>Something Good</h2></PrimaryRecipe>\n            {loading ? <Spinner/> : Object.entries(JSON.parse(state)).slice(1).map((e,i) =>  \n                <Recipe \n                    key={i} \n                    title={e[1].meals[1].title} \n                    id={e[1].meals[1].id}\n                    readyIn={e[1].meals[1].readyInMinutes}\n                ></Recipe>)}\n        </RecipesContainer>\n    )\n\n}\n\nexport default Recipes;","import React from 'react';\nimport Header from './components/header';\nimport Recipes from './containers/recipes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Recipes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}